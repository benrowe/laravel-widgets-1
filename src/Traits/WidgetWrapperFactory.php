<?php

namespace Arrilot\Widgets\Traits;

use Arrilot\Widgets\Expression;

/**
 * Provides the begin & end functionality for the Widget factory
 *
 * @package Benrowe\Laravel\Widgets
 */
trait WidgetWrapperFactory
{
    private $stack = [];

    /**
     *
     * @param  array $args
     * @return void
     */ 
    abstract protected function instantiateWidget(array $args = []);

    /**
     * Retrieve the widget as an expression of Html
     *
     * @param  string $html The html generated by the widget
     * @return Expression
     */
    abstract protected function asExpression($html);

    /**
     * Being the widget
     *
     * @return Expression
     */
    public function begin()
    {
        $args = func_get_args();
        $this->stack[] = $args;
        $this->instantiateWidget($args);

        if (!$this->isWidgetWrapper($this->widget)) {
            throw new Exception('Widget does not support begin/end wrapping');
        }

        return $this->asExpression($this->widget->begin());
    }

    /**
     * End the widget
     *
     * @param array $config suplementry config
     * @return Expression
     */
    public function end($config = [])
    {
        $args = array_pop($this->stack);
        $args[1] = $args[1] ? array_merge($args[1], $config) : [];
        $this->instantiateWidget($args);

        if (!$this->isWidgetWrapper($this->widget)) {
            throw new Exception('Widget does not support begin/end wrapping');
        }

        return $this->asExpression($this->widget->end());
    }

    /**
     * Determine if the supplied widget is a wrapper type of widget
     * aka it uses the WidgetWrapper trait
     *
     * @param  AbstractWidget $widget [description]
     * @return boolean                [description]
     */
    private function isWidgetWrapper(AbstractWidget $widget)
    {
        return $widget instanceof \Arrilot\Widgets\Contracts\Wrapper;
    }
}
